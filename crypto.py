#network attack
import telnetlib
import json

HOST = "socket.cryptohack.org"
PORT = 11112

tn = telnetlib.Telnet(HOST, PORT)


def readline():
    return tn.read_until(b"\n")

def json_recv():
    line = readline()
    return json.loads(line.decode())

def json_send(hsh):
    request = json.dumps(hsh).encode() #convert a string into a json
    tn.write(request)


print(readline())
print(readline())
print(readline())
print(readline())


request = {
    "buy": "flag"
}
json_send(request)

response = json_recv()

print(response)


#ASCII
data=[99, 114, 121, 112, 116, 111, 123, 65, 83, 67, 73, 73, 95, 112, 114, 49, 110, 116, 52, 98, 108, 51, 125]
res= ''
for i in data:
    res+= chr(i)
print(res)


#HEX
res='63727970746f7b596f755f77696c6c5f62655f776f726b696e675f776974685f6865785f737472696e67735f615f6c6f747d'
print (bytes.fromhex(res))

#Base64
import base64
res=bytes.fromhex('72bca9b68fc16ac7beeb8f849dca1d8a783e8acf9679bf9269f7bf')
print (base64.b64encode(res))

#bytes&big integers
from Crypto.Util.number import long_to_bytes
print(long_to_bytes(11515195063862318899931685488813747395775516287289682636499965282714637259206269))


#xor starter
data='label'
res=''
for i in data:
    res+=chr(ord(i)^13)
print (res)

#xor properties 
from pwn import xor

flag = print (xor(bytes.fromhex('a6c8b6733c9b22de7bc0253266a3867df55acde8635e19c73313'), bytes.fromhex('c1545756687e7573db23aa1c3452a098b71a7fbf0fddddde5fc1'), bytes.fromhex('04ee9855208a2cd59091d04767ae47963170d1660df7f56f5faf')) )


#favorite byte
from pwn import *

key = bytes.fromhex('73626960647f6b206821204f21254f7d694f7624662065622127234f726927756d')

for i in range(255):
    res = xor(key, i)
    if 'crypto' in str(res):
        print(res)
        
#You either know, XOR you don't
from pwn import xor

data = bytes.fromhex('0e0b213f26041e480b26217f27342e175d0e070a3c5b103e2526217f27342e175d0e077e263451150104')
xor_key= xor(data[:7], 'crypto{') + xor(data[-1], '}') # crypto{ ^ data(7 prota) + {^ data(telefteo)
print(xor(data, xor_key))


#gcd
from math import gcd
print (gcd(66528, 52920) )


#extended gcd
import numpy as np
import math
def extended(a,b):
    if b==0:
        d=a; x=1; y=0
        return d,x,y
    else:
        d,x1,y1=extended(b,a%b)
        q=a//b
        x=y1
        y=x1-y1*q
        assert a*x +b*y == d
        return d,x,y
print ( extended(26513,32321) )

#lemur xor
import cv2

flag = cv2.imread("/home/vaso/envir/flag.png")
im = cv2.imread("/home/vaso/envir/lemur.png")
res=cv2.bitwise_xor(flag, im, mask = None)

cv2.imshow("image", res)
cv2.waitKey(0)
cv2.destroyAllWindows()
cv2.waitKey(1)


#modular arithmetic 1 
print (min(11%6,8146798528947%16))

#modular arithmetic 2
print(pow(27324678765465536,65536,65537))

#modular inverting
from Crypto.Util.number import inverse
inverse(3, 13)

#ssh keys
#ssh-keygen -f /home/vaso/envir/bruce_rsa.pub -e -m pem 
from Crypto.PublicKey import RSA

key=RSA.import_key( '''-----BEGIN RSA PUBLIC KEY-----
MIIBigKCAYEArTy6m2vhhbwx3RVbNVb3ZOenCqqsOXHaJpbtN+OuulLKBSKpIoPB
+ZDbDXn0qWkf4lOxtGSgolkUbgG07Lhzfgs+dul4UL84CkwZExmF3Rf1nRv+v7pq
Lt2dPsCb02YLxJnhHJb4rQaz2ZM4QCtTOcqYDUeKfLHCaZU4Ekm/OApKrpfw4/0o
fn8KOrFN0t4/dqnNuwVRgoaUIhsI47reApB2rs0AP4CggSIi8s6BXCxB4YzgThBK
5760T1giACYQC5MFdq1Gw+INSFmu0CNqt5wdJ5Z4z5448Gke06R+IMtjUiGDQ3Qt
T2fK3gWhZxk14M4UNrdETgTW/mQ4B/BcvikxvoBGpKbttG0agfOjTen6wyzpGfcd
8N9rSbaqqyUwC8uDotzFtFzzutVAU9d91TagGzWBhNoMfplwVTns27GOOgv1dn5s
QSSSmP0hTbPMDlThysKkR9BiOVbBtWGQpV936pPBgyWERGqMqC9xykLdVHv2Vu05
T0WMwKCAetgtAgMBAAE=
-----END RSA PUBLIC KEY----- ''')

print(key.n)

#quadratic residues
p = 29
ints = [14, 6, 11]

for i in range(1,29):
    res=pow(i,2,29)     # square values from 1-28 
    if res in ints:    #checking if the sqaure's result is in our integer's list 
        print(i)       #print the number i 
        
        
# Legendre Symbol FERMAT LITTLE THEOREM(FLT) q^p ≡ q (mod p) --> q^(p+1) ≡ q^2 (mod p) --> q^((p+1)/4)≡ q^(1/2) (mod p)

p=101524035174539890485408575671085261788758965189060164484385690801466167356667036677932998889725476582421738788500738738503134356158197247473850273565349249573867251280253564698939768700489401960767007716413932851838937641880157263936985954881657889497583485535527613578457628399173971810541670838543309159139
ints=[25081841204695904475894082974192007718642931811040324543182130088804239047149283334700530600468528298920930150221871666297194395061462592781551275161695411167049544771049769000895119729307495913024360169904315078028798025169985966732789207320203861858234048872508633514498384390497048416012928086480326832803, 45471765180330439060504647480621449634904192839383897212809808339619841633826534856109999027962620381874878086991125854247108359699799913776917227058286090426484548349388138935504299609200377899052716663351188664096302672712078508601311725863678223874157861163196340391008634419348573975841578359355931590555, 17364140182001694956465593533200623738590196990236340894554145562517924989208719245429557645254953527658049246737589538280332010533027062477684237933221198639948938784244510469138826808187365678322547992099715229218615475923754896960363138890331502811292427146595752813297603265829581292183917027983351121325, 14388109104985808487337749876058284426747816961971581447380608277949200244660381570568531129775053684256071819837294436069133592772543582735985855506250660938574234958754211349215293281645205354069970790155237033436065434572020652955666855773232074749487007626050323967496732359278657193580493324467258802863, 4379499308310772821004090447650785095356643590411706358119239166662089428685562719233435615196994728767593223519226235062647670077854687031681041462632566890129595506430188602238753450337691441293042716909901692570971955078924699306873191983953501093343423248482960643055943413031768521782634679536276233318, 85256449776780591202928235662805033201684571648990042997557084658000067050672130152734911919581661523957075992761662315262685030115255938352540032297113615687815976039390537716707854569980516690246592112936796917504034711418465442893323439490171095447109457355598873230115172636184525449905022174536414781771, 50576597458517451578431293746926099486388286246142012476814190030935689430726042810458344828563913001012415702876199708216875020997112089693759638454900092580746638631062117961876611545851157613835724635005253792316142379239047654392970415343694657580353333217547079551304961116837545648785312490665576832987, 96868738830341112368094632337476840272563704408573054404213766500407517251810212494515862176356916912627172280446141202661640191237336568731069327906100896178776245311689857997012187599140875912026589672629935267844696976980890380730867520071059572350667913710344648377601017758188404474812654737363275994871, 4881261656846638800623549662943393234361061827128610120046315649707078244180313661063004390750821317096754282796876479695558644108492317407662131441224257537276274962372021273583478509416358764706098471849536036184924640593888902859441388472856822541452041181244337124767666161645827145408781917658423571721, 18237936726367556664171427575475596460727369368246286138804284742124256700367133250078608537129877968287885457417957868580553371999414227484737603688992620953200143688061024092623556471053006464123205133894607923801371986027458274343737860395496260538663183193877539815179246700525865152165600985105257601565]

for n in ints:
    if pow(n, (p-1)//2, p)==1: #if its quadratic residues is 1
        print(pow(quadr_res, (p+1)//4, p)) #FLT   
        
#vectors
import numpy as np
v = np.array([2,6,3])
w = np.array([1,0,0])
u = np.array([7,7,2])
print (np.dot(3*(2*v - w), 2 * u))

#sizes & basis

v = array((4, 6, 2, 5))
print(round(sqrt(dot(v,v))))

#what a lattice
a = np.array([[6, 2, -3],
              [5, 1, 4],
              [2, 7, 1]])
det=np.linalg.det(a)
print (round(abs(det)))  


#RSA Starter 1

print ('RSA Starter 1:' ,pow(101,17,22663))

#RSA Starter 2

e = 65537; p = 17 ; q = 23
N=p*q

print('RSA Starter 2:' ,pow(12,e,N))

#RSA Starter 3

p = 857504083339712752489993810777
q = 1029224947942998075080348647219
phi= (p-1)*(q-1)
print('RSA Starter 3:' ,phi)

#RSA Starter 4

p= 857504083339712752489993810777
q = 1029224947942998075080348647219
e = 65537
phi= (p-1)*(q-1)
d=invert(e,phi)
print('RSA Starter 4:' ,d)

#RSA Starter 5

n = 882564595536224140639625987659416029426239230804614613279163
e = 65537;c=77578995801157823671636298847186723593814843845525223303932
d=121832886702415731577073962957377780195510499965398469843281
print('RSA Starter 5:' ,pow(c,d,n))



#Diffie-Hellman 1

print('Diffie-Hellman 1:' ,inverse(209,991))

#Diffie-Hellman 3
g= 2
p=2410312426921032588552076022197566074856950548502459942654116941958108831682612228890093858261341614673227141477904012196503648957050582631942730706805009223062734745341073406696246014589361659774041027169249453200378729434170325843778659198143763193776859869524088940195577346119843545301547043747207749969763750084308926339295559968882457872412993810129130294592999947926365264059284647209730384947211681434464714438488520940127459844288859336526896320919633919
a=972107443837033796245864316200458246846904598488981605856765890478853088246897345487328491037710219222038930943365848626194109830309179393018216763327572120124760140018038673999837643377590434413866611132403979547150659053897355593394492586978400044375465657296027592948349589216415363722668361328689588996541370097559090335137676411595949335857341797148926151694299575970292809805314431447043469447485957669949989090202320234337890323293401862304986599884732815
print('Diffie-Hellman 3:' ,pow(g,a,p))

#Diffie-Hellman 4
p=2410312426921032588552076022197566074856950548502459942654116941958108831682612228890093858261341614673227141477904012196503648957050582631942730706805009223062734745341073406696246014589361659774041027169249453200378729434170325843778659198143763193776859869524088940195577346119843545301547043747207749969763750084308926339295559968882457872412993810129130294592999947926365264059284647209730384947211681434464714438488520940127459844288859336526896320919633919
A=70249943217595468278554541264975482909289174351516133994495821400710625291840101960595720462672604202133493023241393916394629829526272643847352371534839862030410331485087487331809285533195024369287293217083414424096866925845838641840923193480821332056735592483730921055532222505605661664236182285229504265881752580410194731633895345823963910901731715743835775619780738974844840425579683385344491015955892106904647602049559477279345982530488299847663103078045601
b=12019233252903990344598522535774963020395770409445296724034378433497976840167805970589960962221948290951873387728102115996831454482299243226839490999713763440412177965861508773420532266484619126710566414914227560103715336696193210379850575047730388378348266180934946139100479831339835896583443691529372703954589071507717917136906770122077739814262298488662138085608736103418601750861698417340264213867753834679359191427098195887112064503104510489610448294420720
 
print('Diffie-Hellman 4:' ,pow(A,b,p))

#Diffie-Hellman 5

from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad
import hashlib
def is_pkcs7_padded(message):
    padding = message[-message[-1]:]
    return all(padding[i] == len(padding) for i in range(0, len(padding)))


def decrypt_flag(shared_secret: int, iv: str, ciphertext: str):
    # Derive AES key from shared secret
    sha1 = hashlib.sha1()
    sha1.update(str(shared_secret).encode('ascii'))
    key = sha1.digest()[:16]
    # Decrypt flag
    ciphertext = bytes.fromhex(ciphertext)
    iv = bytes.fromhex(iv)
    cipher = AES.new(key, AES.MODE_CBC, iv)
    plaintext = cipher.decrypt(ciphertext)

    if is_pkcs7_padded(plaintext):
        return unpad(plaintext, 16).decode('ascii')
    else:
        return plaintext.decode('ascii')

p=2410312426921032588552076022197566074856950548502459942654116941958108831682612228890093858261341614673227141477904012196503648957050582631942730706805009223062734745341073406696246014589361659774041027169249453200378729434170325843778659198143763193776859869524088940195577346119843545301547043747207749969763750084308926339295559968882457872412993810129130294592999947926365264059284647209730384947211681434464714438488520940127459844288859336526896320919633919
A=112218739139542908880564359534373424013016249772931962692237907571990334483528877513809272625610512061159061737608547288558662879685086684299624481742865016924065000555267977830144740364467977206555914781236397216033805882207640219686011643468275165718132888489024688846101943642459655423609111976363316080620471928236879737944217503462265615774774318986375878440978819238346077908864116156831874695817477772477121232820827728424890845769152726027520772901423784
b=197395083814907028991785772714920885908249341925650951555219049411298436217190605190824934787336279228785809783531814507661385111220639329358048196339626065676869119737979175531770768861808581110311903548567424039264485661330995221907803300824165469977099494284722831845653985392791480264712091293580274947132480402319812110462641143884577706335859190668240694680261160210609506891842793868297672619625924001403035676872189455767944077542198064499486164431451944

shared_secret= pow(A,b,p)
iv = '737561146ff8194f45290f5766ed6aba'
ciphertext = '39c99bf2f0c14678d6a5416faef954b5893c316fc3c48622ba1fd6a9fe85f3dc72a29c394cf4bc8aff6a7b21cae8e12c'
print('Diffie-Hellman 5:',decrypt_flag(shared_secret, iv, ciphertext))


#jack's birthday
import math
print(math.log10(0.5)/math.log10(1-(1/2**11)))

#Token Appreciation
from jwt import *
token='eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJmbGFnIjoiY3J5cHRve2p3dF9jb250ZW50c19jYW5fYmVfZWFzaWx5X3ZpZXdlZH0iLCJ1c2VyIjoiQ3J5cHRvIE1jSGFjayIsImV4cCI6MjAwNTAzMzQ5M30.shKSmZfgGVvd2OSB2CGezzJ3N6WAULo3w9zCl_T47KQ'
decode(token,algorithms="HS256",options={"verify_signature": FalseJAZZ SCORPION COPPER SELECT})


#no way jose
import jwt
encoded = jwt.encode({'username':'vst','admin':'true'},'',algorithm='none')
print(encoded)


#jwt secrets
import jwt
key="secret"
token = jwt.encode({"username": "user", "admin": True}, key, algorithm="HS256")
print(token)
  

